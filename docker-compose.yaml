
services:
  cart:
    build: cart
    ports:
      - "8080:8080"
    depends_on:
      - products
      - loms
      - jaeger
      - prometheus
    environment:
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces

  products:
    image: gitlab-registry.ozon.dev/go/classroom-16/students/homework-draft/products:latest
    ports:
      - "8082:8082"

  loms:
    build: loms
    ports:
      - "8084:8084"
      - "8083:8083"
    depends_on:
      postgres-master:
        condition: service_healthy
      kafka0:
        condition: service_healthy
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
    environment:
      - CONFIG_FILE=/app/configs/values_local.yaml
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces

  postgres-master:
    image: gitlab-registry.ozon.dev/go/classroom-16/students/base/postgres:16
    container_name: postgres-master
    environment:
      - POSTGRESQL_USERNAME=loms-user
      - POSTGRESQL_PASSWORD=loms-password
      - POSTGRESQL_DATABASE=loms_db
    volumes:
      - master_data:/bitnami/postgresql
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loms-user -d loms_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka0:
    container_name: route256-kafka
    image: confluentinc/cp-kafka:7.7.1
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka0:29092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka-ui:
    container_name: route256-kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka0:
        condition: service_healthy
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka-init:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-init
    depends_on:
      kafka0:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Creating topics...' &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka0:29092 --partitions 2 --replication-factor 1 --topic loms.order-events &&
        echo 'Topics created successfully'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  notifier-1:
    build: notifier
    container_name: notifier-1
    depends_on:
      kafka0:
        condition: service_healthy
    environment:
      - CONFIG_FILE=/app/configs/values_local.yaml
      - INSTANCE_ID=1

  notifier-2:
    build: notifier
    container_name: notifier-2
    depends_on:
      kafka0:
        condition: service_healthy
    environment:
      - CONFIG_FILE=/app/configs/values_local.yaml
      - INSTANCE_ID=2

  notifier-3:
    build: notifier
    container_name: notifier-3
    depends_on:
      kafka0:
        condition: service_healthy
    environment:
      - CONFIG_FILE=/app/configs/values_local.yaml
      - INSTANCE_ID=3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "6831:6831/udp"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411

volumes:
  master_data: {}
  grafana-storage: {}
