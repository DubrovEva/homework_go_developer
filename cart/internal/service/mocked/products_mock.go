// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocked

//go:generate minimock -i route256/cart/internal/service.Products -o products_mock.go -n ProductsMock -p mocked

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductsMock implements mm_service.Products
type ProductsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcProductBySku          func(ctx context.Context, sku int64) (pp1 *models.Product, err error)
	funcProductBySkuOrigin    string
	inspectFuncProductBySku   func(ctx context.Context, sku int64)
	afterProductBySkuCounter  uint64
	beforeProductBySkuCounter uint64
	ProductBySkuMock          mProductsMockProductBySku
}

// NewProductsMock returns a mock for mm_service.Products
func NewProductsMock(t minimock.Tester) *ProductsMock {
	m := &ProductsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProductBySkuMock = mProductsMockProductBySku{mock: m}
	m.ProductBySkuMock.callArgs = []*ProductsMockProductBySkuParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductsMockProductBySku struct {
	optional           bool
	mock               *ProductsMock
	defaultExpectation *ProductsMockProductBySkuExpectation
	expectations       []*ProductsMockProductBySkuExpectation

	callArgs []*ProductsMockProductBySkuParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductsMockProductBySkuExpectation specifies expectation struct of the Products.ProductBySku
type ProductsMockProductBySkuExpectation struct {
	mock               *ProductsMock
	params             *ProductsMockProductBySkuParams
	paramPtrs          *ProductsMockProductBySkuParamPtrs
	expectationOrigins ProductsMockProductBySkuExpectationOrigins
	results            *ProductsMockProductBySkuResults
	returnOrigin       string
	Counter            uint64
}

// ProductsMockProductBySkuParams contains parameters of the Products.ProductBySku
type ProductsMockProductBySkuParams struct {
	ctx context.Context
	sku int64
}

// ProductsMockProductBySkuParamPtrs contains pointers to parameters of the Products.ProductBySku
type ProductsMockProductBySkuParamPtrs struct {
	ctx *context.Context
	sku *int64
}

// ProductsMockProductBySkuResults contains results of the Products.ProductBySku
type ProductsMockProductBySkuResults struct {
	pp1 *models.Product
	err error
}

// ProductsMockProductBySkuOrigins contains origins of expectations of the Products.ProductBySku
type ProductsMockProductBySkuExpectationOrigins struct {
	origin    string
	originCtx string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmProductBySku *mProductsMockProductBySku) Optional() *mProductsMockProductBySku {
	mmProductBySku.optional = true
	return mmProductBySku
}

// Expect sets up expected params for Products.ProductBySku
func (mmProductBySku *mProductsMockProductBySku) Expect(ctx context.Context, sku int64) *mProductsMockProductBySku {
	if mmProductBySku.mock.funcProductBySku != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Set")
	}

	if mmProductBySku.defaultExpectation == nil {
		mmProductBySku.defaultExpectation = &ProductsMockProductBySkuExpectation{}
	}

	if mmProductBySku.defaultExpectation.paramPtrs != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by ExpectParams functions")
	}

	mmProductBySku.defaultExpectation.params = &ProductsMockProductBySkuParams{ctx, sku}
	mmProductBySku.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmProductBySku.expectations {
		if minimock.Equal(e.params, mmProductBySku.defaultExpectation.params) {
			mmProductBySku.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProductBySku.defaultExpectation.params)
		}
	}

	return mmProductBySku
}

// ExpectCtxParam1 sets up expected param ctx for Products.ProductBySku
func (mmProductBySku *mProductsMockProductBySku) ExpectCtxParam1(ctx context.Context) *mProductsMockProductBySku {
	if mmProductBySku.mock.funcProductBySku != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Set")
	}

	if mmProductBySku.defaultExpectation == nil {
		mmProductBySku.defaultExpectation = &ProductsMockProductBySkuExpectation{}
	}

	if mmProductBySku.defaultExpectation.params != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Expect")
	}

	if mmProductBySku.defaultExpectation.paramPtrs == nil {
		mmProductBySku.defaultExpectation.paramPtrs = &ProductsMockProductBySkuParamPtrs{}
	}
	mmProductBySku.defaultExpectation.paramPtrs.ctx = &ctx
	mmProductBySku.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmProductBySku
}

// ExpectSkuParam2 sets up expected param sku for Products.ProductBySku
func (mmProductBySku *mProductsMockProductBySku) ExpectSkuParam2(sku int64) *mProductsMockProductBySku {
	if mmProductBySku.mock.funcProductBySku != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Set")
	}

	if mmProductBySku.defaultExpectation == nil {
		mmProductBySku.defaultExpectation = &ProductsMockProductBySkuExpectation{}
	}

	if mmProductBySku.defaultExpectation.params != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Expect")
	}

	if mmProductBySku.defaultExpectation.paramPtrs == nil {
		mmProductBySku.defaultExpectation.paramPtrs = &ProductsMockProductBySkuParamPtrs{}
	}
	mmProductBySku.defaultExpectation.paramPtrs.sku = &sku
	mmProductBySku.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmProductBySku
}

// Inspect accepts an inspector function that has same arguments as the Products.ProductBySku
func (mmProductBySku *mProductsMockProductBySku) Inspect(f func(ctx context.Context, sku int64)) *mProductsMockProductBySku {
	if mmProductBySku.mock.inspectFuncProductBySku != nil {
		mmProductBySku.mock.t.Fatalf("Inspect function is already set for ProductsMock.ProductBySku")
	}

	mmProductBySku.mock.inspectFuncProductBySku = f

	return mmProductBySku
}

// Return sets up results that will be returned by Products.ProductBySku
func (mmProductBySku *mProductsMockProductBySku) Return(pp1 *models.Product, err error) *ProductsMock {
	if mmProductBySku.mock.funcProductBySku != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Set")
	}

	if mmProductBySku.defaultExpectation == nil {
		mmProductBySku.defaultExpectation = &ProductsMockProductBySkuExpectation{mock: mmProductBySku.mock}
	}
	mmProductBySku.defaultExpectation.results = &ProductsMockProductBySkuResults{pp1, err}
	mmProductBySku.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmProductBySku.mock
}

// Set uses given function f to mock the Products.ProductBySku method
func (mmProductBySku *mProductsMockProductBySku) Set(f func(ctx context.Context, sku int64) (pp1 *models.Product, err error)) *ProductsMock {
	if mmProductBySku.defaultExpectation != nil {
		mmProductBySku.mock.t.Fatalf("Default expectation is already set for the Products.ProductBySku method")
	}

	if len(mmProductBySku.expectations) > 0 {
		mmProductBySku.mock.t.Fatalf("Some expectations are already set for the Products.ProductBySku method")
	}

	mmProductBySku.mock.funcProductBySku = f
	mmProductBySku.mock.funcProductBySkuOrigin = minimock.CallerInfo(1)
	return mmProductBySku.mock
}

// When sets expectation for the Products.ProductBySku which will trigger the result defined by the following
// Then helper
func (mmProductBySku *mProductsMockProductBySku) When(ctx context.Context, sku int64) *ProductsMockProductBySkuExpectation {
	if mmProductBySku.mock.funcProductBySku != nil {
		mmProductBySku.mock.t.Fatalf("ProductsMock.ProductBySku mock is already set by Set")
	}

	expectation := &ProductsMockProductBySkuExpectation{
		mock:               mmProductBySku.mock,
		params:             &ProductsMockProductBySkuParams{ctx, sku},
		expectationOrigins: ProductsMockProductBySkuExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmProductBySku.expectations = append(mmProductBySku.expectations, expectation)
	return expectation
}

// Then sets up Products.ProductBySku return parameters for the expectation previously defined by the When method
func (e *ProductsMockProductBySkuExpectation) Then(pp1 *models.Product, err error) *ProductsMock {
	e.results = &ProductsMockProductBySkuResults{pp1, err}
	return e.mock
}

// Times sets number of times Products.ProductBySku should be invoked
func (mmProductBySku *mProductsMockProductBySku) Times(n uint64) *mProductsMockProductBySku {
	if n == 0 {
		mmProductBySku.mock.t.Fatalf("Times of ProductsMock.ProductBySku mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmProductBySku.expectedInvocations, n)
	mmProductBySku.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmProductBySku
}

func (mmProductBySku *mProductsMockProductBySku) invocationsDone() bool {
	if len(mmProductBySku.expectations) == 0 && mmProductBySku.defaultExpectation == nil && mmProductBySku.mock.funcProductBySku == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmProductBySku.mock.afterProductBySkuCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmProductBySku.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ProductBySku implements mm_service.Products
func (mmProductBySku *ProductsMock) ProductBySku(ctx context.Context, sku int64) (pp1 *models.Product, err error) {
	mm_atomic.AddUint64(&mmProductBySku.beforeProductBySkuCounter, 1)
	defer mm_atomic.AddUint64(&mmProductBySku.afterProductBySkuCounter, 1)

	mmProductBySku.t.Helper()

	if mmProductBySku.inspectFuncProductBySku != nil {
		mmProductBySku.inspectFuncProductBySku(ctx, sku)
	}

	mm_params := ProductsMockProductBySkuParams{ctx, sku}

	// Record call args
	mmProductBySku.ProductBySkuMock.mutex.Lock()
	mmProductBySku.ProductBySkuMock.callArgs = append(mmProductBySku.ProductBySkuMock.callArgs, &mm_params)
	mmProductBySku.ProductBySkuMock.mutex.Unlock()

	for _, e := range mmProductBySku.ProductBySkuMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmProductBySku.ProductBySkuMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProductBySku.ProductBySkuMock.defaultExpectation.Counter, 1)
		mm_want := mmProductBySku.ProductBySkuMock.defaultExpectation.params
		mm_want_ptrs := mmProductBySku.ProductBySkuMock.defaultExpectation.paramPtrs

		mm_got := ProductsMockProductBySkuParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmProductBySku.t.Errorf("ProductsMock.ProductBySku got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProductBySku.ProductBySkuMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmProductBySku.t.Errorf("ProductsMock.ProductBySku got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProductBySku.ProductBySkuMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProductBySku.t.Errorf("ProductsMock.ProductBySku got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmProductBySku.ProductBySkuMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProductBySku.ProductBySkuMock.defaultExpectation.results
		if mm_results == nil {
			mmProductBySku.t.Fatal("No results are set for the ProductsMock.ProductBySku")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmProductBySku.funcProductBySku != nil {
		return mmProductBySku.funcProductBySku(ctx, sku)
	}
	mmProductBySku.t.Fatalf("Unexpected call to ProductsMock.ProductBySku. %v %v", ctx, sku)
	return
}

// ProductBySkuAfterCounter returns a count of finished ProductsMock.ProductBySku invocations
func (mmProductBySku *ProductsMock) ProductBySkuAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProductBySku.afterProductBySkuCounter)
}

// ProductBySkuBeforeCounter returns a count of ProductsMock.ProductBySku invocations
func (mmProductBySku *ProductsMock) ProductBySkuBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProductBySku.beforeProductBySkuCounter)
}

// Calls returns a list of arguments used in each call to ProductsMock.ProductBySku.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProductBySku *mProductsMockProductBySku) Calls() []*ProductsMockProductBySkuParams {
	mmProductBySku.mutex.RLock()

	argCopy := make([]*ProductsMockProductBySkuParams, len(mmProductBySku.callArgs))
	copy(argCopy, mmProductBySku.callArgs)

	mmProductBySku.mutex.RUnlock()

	return argCopy
}

// MinimockProductBySkuDone returns true if the count of the ProductBySku invocations corresponds
// the number of defined expectations
func (m *ProductsMock) MinimockProductBySkuDone() bool {
	if m.ProductBySkuMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ProductBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ProductBySkuMock.invocationsDone()
}

// MinimockProductBySkuInspect logs each unmet expectation
func (m *ProductsMock) MinimockProductBySkuInspect() {
	for _, e := range m.ProductBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductsMock.ProductBySku at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterProductBySkuCounter := mm_atomic.LoadUint64(&m.afterProductBySkuCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ProductBySkuMock.defaultExpectation != nil && afterProductBySkuCounter < 1 {
		if m.ProductBySkuMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductsMock.ProductBySku at\n%s", m.ProductBySkuMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductsMock.ProductBySku at\n%s with params: %#v", m.ProductBySkuMock.defaultExpectation.expectationOrigins.origin, *m.ProductBySkuMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProductBySku != nil && afterProductBySkuCounter < 1 {
		m.t.Errorf("Expected call to ProductsMock.ProductBySku at\n%s", m.funcProductBySkuOrigin)
	}

	if !m.ProductBySkuMock.invocationsDone() && afterProductBySkuCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductsMock.ProductBySku at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ProductBySkuMock.expectedInvocations), m.ProductBySkuMock.expectedInvocationsOrigin, afterProductBySkuCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockProductBySkuInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProductBySkuDone()
}
